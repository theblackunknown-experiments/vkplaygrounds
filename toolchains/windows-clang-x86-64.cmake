

set(CMAKE_SYSTEM_NAME      Windows)
set(CMAKE_SYSTEM_PROCESSOR amd64)
set(CMAKE_SYSTEM_VERSION   10.0.19041.0)

# set(TARGET x86_64-pc-win32)
set(TARGET x86_64-pc-windows-msvc)

find_program(CMAKE_C_COMPILER          clang)
set         (CMAKE_C_COMPILER_TARGET   ${TARGET})

find_program(CMAKE_CXX_COMPILER        clang++)
set         (CMAKE_CXX_COMPILER_TARGET ${TARGET})

find_program(CMAKE_ASM_COMPILER        clang)
set         (CMAKE_ASM_COMPILER_TARGET ${TARGET})

set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
# set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
# set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
# set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

# Specify compiler flags
set(ARCH_FLAGS                  "") # "-mcpu=cortex-a5 -mthumb -mfpu=neon-vfpv4 -mfloat-abi=hard")
set(CMAKE_C_FLAGS_INIT          "${ARCH_FLAGS}" CACHE STRING "Common flags for C compiler")
set(CMAKE_CXX_FLAGS_INIT        "${ARCH_FLAGS}" CACHE STRING "Common flags for C++ compiler")
set(CMAKE_ASM_FLAGS_INIT        "${ARCH_FLAGS}" CACHE STRING "Common flags for assembler")
set(CMAKE_EXE_LINKER_FLAGS_INIT ""              CACHE STRING "Flags for linker for executable")

# C/C++ toolchain
# set(CMAKE_SYSROOT ${GCC_ARM_SYSROOT})
# set(CMAKE_FIND_ROOT_PATH ${GCC_ARM_SYSROOT})

# Search for programs in the build host directories
# set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
# For libraries and headers in the target directories
# set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
# set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

set(CMAKE_STATIC_LIBRARY_PREFIX "")
set(CMAKE_STATIC_LIBRARY_SUFFIX ".lib")
set(CMAKE_SHARED_LIBRARY_PREFIX "")          # lib
set(CMAKE_SHARED_LIBRARY_SUFFIX ".dll")          # .so
set(CMAKE_IMPORT_LIBRARY_PREFIX "")
set(CMAKE_IMPORT_LIBRARY_SUFFIX ".lib")
set(CMAKE_EXECUTABLE_SUFFIX ".exe")          # .exe
set(CMAKE_LINK_LIBRARY_SUFFIX ".lib")
set(CMAKE_DL_LIBS "")
set(CMAKE_EXTRA_LINK_EXTENSIONS ".targets")

set(CMAKE_FIND_LIBRARY_PREFIXES "")
set(CMAKE_FIND_LIBRARY_SUFFIXES ".lib")

# message(STATUS "CMAKE_C_SIMULATE_ID        : ${CMAKE_C_SIMULATE_ID}")
# message(STATUS "CMAKE_CXX_SIMULATE_ID      : ${CMAKE_CXX_SIMULATE_ID}")

# message(STATUS "CMAKE_STATIC_LIBRARY_PREFIX: ${CMAKE_STATIC_LIBRARY_PREFIX}")
# message(STATUS "CMAKE_STATIC_LIBRARY_SUFFIX: ${CMAKE_STATIC_LIBRARY_SUFFIX}")
# message(STATUS "CMAKE_SHARED_LIBRARY_PREFIX: ${CMAKE_SHARED_LIBRARY_PREFIX}")
# message(STATUS "CMAKE_SHARED_LIBRARY_SUFFIX: ${CMAKE_SHARED_LIBRARY_SUFFIX}")
# message(STATUS "CMAKE_IMPORT_LIBRARY_PREFIX: ${CMAKE_IMPORT_LIBRARY_PREFIX}")
# message(STATUS "CMAKE_IMPORT_LIBRARY_SUFFIX: ${CMAKE_IMPORT_LIBRARY_SUFFIX}")
# message(STATUS "CMAKE_EXECUTABLE_SUFFIX    : ${CMAKE_EXECUTABLE_SUFFIX}")
# message(STATUS "CMAKE_LINK_LIBRARY_SUFFIX  : ${CMAKE_LINK_LIBRARY_SUFFIX}")
# message(STATUS "CMAKE_DL_LIBS              : ${CMAKE_DL_LIBS}")
# message(STATUS "CMAKE_EXTRA_LINK_EXTENSIONS: ${CMAKE_EXTRA_LINK_EXTENSIONS}")

# message(STATUS "CMAKE_FIND_LIBRARY_PREFIXES: ${CMAKE_FIND_LIBRARY_PREFIXES}")
# message(STATUS "CMAKE_FIND_LIBRARY_SUFFIXES: ${CMAKE_FIND_LIBRARY_SUFFIXES}")
